h1. YUI Bootstrapper for Node.js

This node.js module attempts to setup and bootstrap a working YUI 3 instance.

This module includes support for remote script loading via Y.Get.script() and remote data fetching via Y.io.

See "JSDom Support" below for DOM manipulation.

h2. Setup this repo

Clone this project, then do this:
<pre class="console">
    cd nodejs-yui3/lib
    git clone git://github.com/yui/yui3.git
</pre>

You should go into that repo every now and then and do a git pull to keep it up to date with the latest YUI source.


h2. Node.js

These tests and examples are all known to be working with latest stable Node.js: v0.1.33

All of the examples and tests assume you nave @node@ in your path and they are all executable.


h2. JSDom Support

Currently YUI 3 on Node.js supports "JSDom":http://github.com/tmpvar/jsom
It also requires my forked "node-htmlparser":http://github.com/davglass/node-htmlparser

Getting it up and running:

<pre class="console">
    mkdir ~/.node_libraries
    cd ~/.node_libraries
    wget http://github.com/tmpvar/jsdom/raw/master/lib/level1/core.js -O jsdom.js
    wget http://github.com/tmpvar/jsdom/raw/master/lib/browser/index.js -O browser.js
    wget http://github.com/davglass/node-htmlparser/raw/master/node-htmlparser.js
</pre>

Now that the libraries are in the right places you can now use the dom related examples.


h2. Using the Y.Browser object

To comply with the "no-globals" CommonJS spec, there is no global document or window in this mode.
Just including the nodejs-dom module will create a fake dom for this instance.
You can create a document like this:
<pre class="console">
YUI().use('nodejs-dom', function(Y) {
    // Y.Browser
    {
        window, //fake window
        document, //jsdom document
        self, //window
        location, //window.location, has an href == __filename
        navigator //Fake navigator, appVersion => Node version, appName => Node.js, userAgent => Custom for Node ;)
    }
});
</pre>

Making older DOM code run:
<pre class="console">
YUI().use('nodejs-dom', function(Y) {
    var document = Y.Browser.document;
    document.createElement('div');
});
</pre>

If you are using YUI to serve pages, you should use a Nested Use to create the document when the request comes in.

Something like this:

Making older DOM code run:
<pre class="console">
YUI().use('event', 'io', function(Y) {
    //Do your stuff
    
    //Inside the request handler callback:
    //Now each request get's a new DOM and not a shared one.
    Y.use('nodejs-dom', function(Y) {
        var document = Y.Browser.document;
        document.createElement('div');
    });
});
</pre>

I have an example showing this: @examples/y-browser.js@


h2. Examples

<pre class="console">
    cd examples/
    ./general-dom.js
    ./io.js
    ./library.js
    ./y-brower.js
</pre>

h2. Tests

When using JSDom, All relevent YUI 3 Dom & Selector tests pass. The ones that are skipped revolve around styles and postioning. Since there is no window or CSS cascade, these seem unimportant at the moment.

<pre class="console">
    cd ./tests/
    ./dom.js
    ./selector.js
</pre>

